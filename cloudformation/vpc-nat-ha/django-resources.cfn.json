{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Provision resource dependencies for the testproject app (e.g., RDS, S3, DynamoDB, etc..), then app on AWS Elastic Beanstalk via the django-eb-app substack.",

  "Parameters": {

    "DatabaseUser": {
      "Default": "dbadmin",
      "NoEcho": "true",
      "Type": "String",
      "Description": "Database admin account name",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DatabasePassword": {
      "Default": "0bee082a464",
      "NoEcho": "true",
      "Type": "String",
      "Description": "Database admin account password",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "DatabaseName": {
      "Description": "The name of the database",
      "Type": "String",
      "Default": " django"
    },
    "DatabaseInstanceType" : {
      "Description" : "RDS DB instance type",
      "Default": "db.t2.micro",
      "Type" : "String",
      "AllowedValues" : [
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.t2.large",
        "db.m3.medium",
        "db.m3.large",
        "db.m3.xlarge",
        "db.m3.2xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge"
      ]
    },
    "MultiAZDatabase" : {
      "Description" : "Use MultiAZ RDS DB",
      "Default": "true",
      "Type" : "String",
      "AllowedValues" : [
        "false",
        "true"
      ]
    },
    "ZoneAwareElasticsearch" : {
      "Description" : "Use ZoneAware Elasticsearch",
      "Default": "true",
      "Type" : "String",
      "AllowedValues" : [
        "false",
        "true"
      ]
    },
    "NumMemcacheNodes": {
      "Type": "Number",
      "Default": "2",
      "Description": "Number of nodes to build into the Memcache Cluster."
    },
    "NumRedisCacheNodes": {
      "Type": "Number",
      "Default": "2",
      "Description": "Number of nodes to build into the Redis Cluster."
    },
    "CacheInstanceType" : {
      "Description" : "Memcached instance type",
      "Default": "cache.t2.micro",
      "Type" : "String",
      "AllowedValues" : [
        "cache.t2.micro",
        "cache.t2.small",
        "cache.t2.medium",
        "cache.m3.medium",
        "cache.m3.large",
        "cache.m3.xlarge",
        "cache.m3.2xlarge",
        "cache.r3.large",
        "cache.r3.xlarge",
        "cache.r3.2xlarge",
        "cache.r3.4xlarge",
        "cache.r3.8xlarge"
      ]
    },
    "ElasticsearchDomainCustomResourceLambdaName": {
      "Type": "String",
      "Default": "cfn-elasticsearch-domain-0-1-1",
      "Description": "The name of the ElasticseachDomain Lambda you deployed to test this stack."
    },
    "ElasticsearchDomainName": {
      "Type": "String",
      "Default": "mysearchdomain",
      "Description": "The name of the Elasticsearch Domain you will launch",
      "AllowedPattern": "[a-z][a-z0-9\\-]+"
    },
    "ElasticsearchDomainClusterNodeCount": {
      "Type": "Number",
      "Default": "1",
      "Description": "Number of nodes to build into the Elasticsearch Domain Cluster."
    },
    "ElasticsearchDomainClusterNodeSize": {
      "Type": "String",
      "Description": "Size of nodes to build into the Elasticsearch Domain Cluster.",
      "Default": "t2.micro.elasticsearch",
      "AllowedValues": [
        "m3.medium.elasticsearch",
        "m3.large.elasticsearch",
        "m3.xlarge.elasticsearch",
        "m3.2xlarge.elasticsearch",
        "t2.micro.elasticsearch",
        "t2.small.elasticsearch",
        "t2.medium.elasticsearch",
        "r3.large.elasticsearch",
        "r3.xlarge.elasticsearch",
        "r3.2xlarge.elasticsearch",
        "r3.4xlarge.elasticsearch",
        "r3.8xlarge.elasticsearch",
        "i2.xlarge.elasticsearch",
        "i2.2xlarge.elasticsearch"
      ]
    },
    "InstanceSecurityGroup" : {
      "Description" : "A VPC Security Group ID that has ingress access to a NAT instance in the VPC. EB instances will be launched into this group.",
      "Type": "String"
    },
    "VPCId" : {
      "Description" : "A VPC ID.",
      "Type": "String"
    },
    "PrivateSubnet1" : {
      "Description" : "A private VPC subnet ID.",
      "Type": "String"
    },
    "PrivateSubnet2" : {
      "Description" : "A private VPC subnet ID. Must be in a different AZ than PrivateSubnet1",
      "Type": "String"
    },
    "PublicSubnet1" : {
      "Description" : "A public VPC subnet ID.",
      "Type": "String"
    },
    "PublicSubnet2" : {
      "Description" : "A public VPC subnet ID. Must be in a different AZ than PublicSubnet1",
      "Type": "String"
    }
  },

  "Resources": {
    "MediaBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "PublicRead",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "ExposedHeaders": [
                "Date"
              ],
              "Id": "myCORSRuleId1",
              "MaxAge": "3600"
            }
          ]
        }
      }
    },
    "CacheSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow access to the cache from the Web Server",
        "VpcId" : { "Ref" : "VPCId" },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "0",
          "ToPort": "65535",
          "SourceSecurityGroupId": {
            "Ref": "InstanceSecurityGroup"
          }
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "0",
          "ToPort": "65535",
          "SourceSecurityGroupId": {
            "Ref": "InstanceSecurityGroup"
          }
        }]
      }      
    },

    "CacheSubnetGroup" : {
      "Type" : "AWS::ElastiCache::SubnetGroup",
      "Properties" : {
        "Description" : "Cache Subnet Group",
        "SubnetIds": [
          { "Ref": "PrivateSubnet1" },
          { "Ref": "PrivateSubnet2" }
        ]
      }
    },

    "MemCacheParameters" : {
      "Type" : "AWS::ElastiCache::ParameterGroup",
      "Properties" : {
        "CacheParameterGroupFamily" : "memcached1.4",
        "Description" : "Parameter group",
        "Properties" : {
          "cas_disabled" : "1"
        }
      }
    },


    "MemCacheCluster" : {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "CacheSubnetGroupName" : { "Ref" : "CacheSubnetGroup" },
        "CacheNodeType"        : { "Ref" : "CacheInstanceType" },
        "VpcSecurityGroupIds"  : [ { "Ref" : "CacheSecurityGroup" } ],
        "Engine"               : "memcached",
        "NumCacheNodes"        : { "Ref" : "NumMemcacheNodes" }
      }
    },

    "RedisCacheCluster" : {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "CacheSubnetGroupName" : { "Ref" : "CacheSubnetGroup" },
        "CacheNodeType"        : { "Ref" : "CacheInstanceType" },
        "VpcSecurityGroupIds"  : [ { "Ref" : "CacheSecurityGroup" } ],
        "Engine"               : "redis",
        "NumCacheNodes"        : { "Ref" : "NumRedisCacheNodes" }
      }
    },
    "MyElasticsearchDomain": {
      "Type": "Custom::ElasticsearchDomain",
      "Properties": {
        "ServiceToken": {
          "Fn::Join": [
            ":",
            [
              "arn",
              "aws",
              "lambda",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              "function",
              {
                "Ref": "ElasticsearchDomainCustomResourceLambdaName"
              }
            ]
          ]
        },
        "DomainName": {
          "Ref": "ElasticsearchDomainName"
        },
        "AccessPolicies": {
          "Fn::Join": [
            "",
            [
              "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"*\"]},\"Action\":[\"es:*\"],\"Resource\":\"arn:aws:es:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":domain/",
              {
                "Ref": "ElasticsearchDomainName"
              },
              "/*\"}]}"
            ]
          ]
        },
        "ElasticsearchClusterConfig": {
          "InstanceCount": {
            "Ref": "ElasticsearchDomainClusterNodeCount"
          },
          "InstanceType": {
            "Ref": "ElasticsearchDomainClusterNodeSize"
          },
          "ZoneAwarenessEnabled": { "Ref": "ZoneAwareElasticsearch"  }
        },
        "EBSOptions": {
          "EBSEnabled": true,
          "VolumeSize": 10,
          "VolumeType": "standard"
        }
      }
    },

    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow the Elastic Beanstalk instances to access the RDS database",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "5432",
          "ToPort": "5432",
          "SourceSecurityGroupId": {
            "Ref": "InstanceSecurityGroup"
          }
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "5432",
          "ToPort": "5432",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },

    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "RDS DB Subnet group",
        "SubnetIds": [
          { "Ref": "PrivateSubnet1" },
          { "Ref": "PrivateSubnet2" }
        ]
      }
    },

    "Database": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "Engine": "postgres",
        "DBName": {
          "Ref": "DatabaseName"
        },
        "MasterUsername": {
          "Ref": "DatabaseUser"
        },
        "DBInstanceClass": {
          "Ref": "DatabaseInstanceType"
        },
        "AllocatedStorage": "5",
        "MasterUserPassword": {
          "Ref": "DatabasePassword"
        },
        "VPCSecurityGroups": [{
          "Ref": "DBSecurityGroup"
        }],
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "MultiAZ": { "Ref": "MultiAZDatabase"  }
      }
    }
  },
  "Outputs": {
    "InstanceSecurityGroup": {
      "Value": {"Ref": "InstanceSecurityGroup"}
    },
    "RdsDbId": {
       "Value" : { "Ref" : "Database" }
    },
    "MemCacheEndpoint": { 
      "Value": { "Fn::GetAtt" : [ "MemCacheCluster", "ConfigurationEndpoint.Address" ]}
    },
    "MemCachePort": { 
      "Value" : {"Fn::GetAtt" : [ "MemCacheCluster", "ConfigurationEndpoint.Port" ]}
    },
    "RedisCacheId": { 
      "Value": { "Ref" : "RedisCacheCluster"}
    },
    "ElasticsearchDomainEndpoint": {
      "Value": { "Fn::GetAtt": [ "MyElasticsearchDomain", "Endpoint" ] }
    },
    "MediaBucket": {
      "Value": { "Ref" : "MediaBucket"}
    },
    "DatabaseUser":{
      "Value": { "Ref" : "DatabaseUser"}
    },
    "DatabasePassword": {
      "Value": { "Ref" : "DatabasePassword" }
    },
    "DatabaseHost" : {
        "Value" : { "Fn::GetAtt" : ["Database", "Endpoint.Address"] }
    },
    "DatabasePort" : {
        "Value" : { "Fn::GetAtt" : ["Database", "Endpoint.Port"] }
    },
    "InstanceSecurityGroup": {
      "Value": { "Ref" : "InstanceSecurityGroup" }
    }
  }
}
